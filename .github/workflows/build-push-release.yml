name: Build-Push-Release
on:
  push:
    branches:
      - master 
      - main
      - develop
    tags:
      - 'v[0-9]+.[0-9]+.*'
jobs:
  build-push-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }} 
        fetch-depth: 0
    # - name: Get Semver version
    #   uses: codacy/git-version@2.7.1
    #   id: version 
    # - name: Get Version 
    #   run: |
    #     echo "v${{ steps.version.outputs.version }}"
    # - name: Get Version 
    #   run: |
    #     echo "v${{ steps.version.outputs.version }}"

    - name: Semver Check
      uses: paulhatch/semantic-version@v5.0.2
      id: version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: ""
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}-prerelease${increment}"
       
        # # Optional path to check for changes. If any changes are detected in the path the
        # # 'changed' output will true. Enter multiple paths separated by spaces.
        # change_path: "src/my-service"
        # # Named version, will be used as suffix for name version tag
        # namespace: my-service
        # # If this is set to true, *every* commit will be treated as a new version.
        # bump_each_commit: false
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: false
        # # The output method used to generate list of users, 'csv' or 'json'.
        # user_format_type: "csv"
        # # Prevents pre-v1.0.0 version from automatically incrementing the major version.
        # # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
        # enable_prerelease_mode: true
    - name: Get Version 
      run: |
        echo "${{ steps.version.outputs.version }}"
#=======================================================================
    # - name: generate release notes
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     gh api -X POST 'repos/{owner}/{repo}/releases/generate-notes' \
    #       -F commitish=${{ env.RELEASE_VERSION }} \
    #       -F tag_name=${{ env.RELEASE_VERSION }} \
    #       > tmp-release-notes.json
